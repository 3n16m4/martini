#include <iomanip>
#include <ctime>
#include <chrono>
#include <iostream>
#include <random>
#include <vector>
#include <string>
#include <unordered_map>
#include <sstream>
#include <algorithm>
#include <iterator>

std::unordered_map<std::string, int32_t> m_commands = {
    {"ansprechen", 0}, {"klatschen", 0}, {"clap", 0}, {"beweg", 1}, {"ToggleGravitation", 1}, {"beam", 1}, {"push", 1},
    {"look", 1}, {"get", 1}, {"taste", 1}, {"hämmere mit", 1}, {"DamagePanel", 2}, {"unlock", 2}
};

const std::vector<std::string> v_items = {
    "Raumschiff", "Palette", "Forschungsutensilien", "Antigravitationsgreifer", "Spind", "Sicherheitsausweis",
    "Mobitab", "Umkleidekammer", "Raumanzug", "Drucklufthammer", "Öffnungshebel", "Leiche", "Laborkittel",
    "Transponder", "Kommunikationsausrüstung", "Blinkender Knopf", "KlappeInDerWand", "Phiole", "Krankenbett", "Pult",
    "Videoblog", "Maschinenkern", "Hilfsgenerator", "StartKnopf", "Splitter", "Loch", "Leitstrahl",
    "Antennenkonfiguration", "Raumphänomen", "Blaues Feld", "Scherben", "Nebel", "Notruftaste", "Deckenfenster",
    "Bodenfenster", "PHan2GaJu", "PGaJu2GaBe", "PGaDe2GaJu", "PGaBe2BeJu", "PDeJu2GaDe", "PBeJu2ABe", "PABe2AJu",
    "PAJu2ADe", "PADe2DeJu", "PDeJu2Sol", "PAJu2Med", "PBeJu2Eng", "PAJu2Duty", "PDuty2Crew", "PStorAr2DeAI",
    "PStorRo2DeGre", "PStorRo2AAI", "PStorAr2BeGre", "PStorRo2Caf", "PMainG2DeAI", "PBrief2Bri"
};

const std::vector<std::string> v_rooms = {
    "DockingBay", "Hangar", "GammaJunction", "GammaDeltaKorridor", "GammaBetaKorridor", "DeltaJunction", "BetaJunction",
    "AlphaBetaKorridor", "AlphaJunction", "AlphaDeltaKorridor", "ComBase", "XenoLab", "SolarLab", "MedLab",
    "EngineeringLab", "DutyRoom", "CrewQuarter", "EngineCore", "SecondGenerator", "Weltraum", "Dekontaminationskabine",
    "StorageArea", "DeltaAI", "DeltaGreenhouse", "StorageRoom", "AlphaAI", "BetaGreenhouse", "Cafeteria", "Fitness",
    "MainGenerator", "BriefingRoom", "Bridge", "AntennaArrayComModule"
};

std::vector<std::string> v_all_commands;

void fillCommands() {
  for (auto &item : v_items) {
    for (auto &command : m_commands) {
      for (const auto &firstItem : v_items) {
        if (command.second == 2) {
          std::stringstream ss;
          ss << command.first << " " << firstItem << " with " << item;
          v_all_commands.emplace_back(ss.str());
        }
      }
      if (command.second == 0) {
        v_all_commands.emplace_back(command.first);
      }
      if (command.second == 1) {
        std::stringstream ss;
        ss << command.first << " " << item;
        v_all_commands.emplace_back(ss.str());
      }
    }
  }
}

/**
 * Generates pseudo-random Inform7 Test Cases.
 * Example: Test MonkeyTest0 with "DamagePanel Antennenkonfiguration with Antennenkonfiguration /
 * unlock Nebel with PADe2DeJu / unlock PHan2GaJu with Mobitab" in Hangar.
 * @param n
 * @param name
 */
void generateTestMethods(const std::size_t n, const std::string &name) {
  constexpr uint8_t AMOUNT_OF_COMMAND = 16;

  fillCommands();

  std::random_device rd;
  std::mt19937 rng{rd()};
  std::uniform_int_distribution<int> dis(0, v_rooms.size() - 1);

  std::shuffle(v_all_commands.begin(), v_all_commands.end(), rng);

  std::stringstream ss;
  const auto t = std::time(nullptr);
  const auto tm = *std::localtime(&t);

  // get 16 random commands from commands vector and combine with 1 random room from room vector
  ss << "[@author: Rachid Mzannar]\n";
  ss << "[Automatically generated by martini at: " << std::put_time(&tm, "%d-%m-%Y %H:%M:%S") << "]" << '\n';
  ss << "Test " << name << n << " with \"";
  for (int i = 0; i < AMOUNT_OF_COMMAND; ++i) {
    ss << v_all_commands[i] << " / ";
  }
  std::string str = ss.str();
  str.erase(str.length() - 3);
  str += "\"";
  std::stringstream whole;
  whole << str << " in " << v_rooms[dis(rng)] << "." << '\n';
  std::cout << whole.str() << std::endl;
}

int main() {
  std::cout << "Amount of rooms: " << v_rooms.size() << '\n';
  for (size_t i = 0; i < 10; ++i)
    generateTestMethods(i, "MonkeyTest");

  return 0;
}
